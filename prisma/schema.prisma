// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@internal/prisma/smartg4"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//enum Priority {
//  LOW
//  NORMAL
//  HIGH
//}

//type DeviceNode {
//  NodeClass     String
//  Name          String
//  AmpRating     Float?
//  VoltRating    Float?
//  WattRating    Int?
//}

//type DeviceNodeState {
//  State         Boolean?             // for power on/off, sensor detection
//  StatusValue   Int?                 // 0 - 100 powered state. e. g. dimmer, motor
//  AmpereValue   Int?
//  VoltageValue  Int?
//  WattPower     Int?
//}

model User {
  Id                Int               @id @default(autoincrement()) @map("_id")
  Username          String
  Email             String?
  FirstName         String?
  LastName          String?
  Password          String
  Disabled          Boolean?
  Archived          Boolean?
  CreatedOn         DateTime
  ArchivedOn        DateTime?
  LoginKey          String?
  LoginKeyExpireOn  DateTime?

  Roles            UserRole[]

  Sessions          UserSession[]
}

model UserRole {
  Id            Int                 @id @default(autoincrement()) @map("_id")
  RoleName      String              @unique
  Description   String?

  Users         User[]              
}

model UserSession {
  SessionId     String              @id @default(uuid()) @map("_id")
  UserId        Int              
  User          User                @relation(fields: [UserId], references: [Id], onDelete: Cascade)
  UserIp        String  
  LoginOn       DateTime
  ExpireOn      DateTime  
}

model Area {
  Id            Int                 @id @default(autoincrement()) @map("_id")
  Name          String
  Details       String?

  IsOccupied    Boolean?            @default(false)
  
  ParentAreaId  Int?             
  ParentArea    Area?               @relation(name: "ParentSubArea", fields: [ParentAreaId], references: [Id], onDelete: NoAction, onUpdate: NoAction)

  SubAreas      Area[]              @relation(name: "ParentSubArea")

  Devices       NetworkDevice[]

  CreatedOn     DateTime
  UpdatedOn     DateTime
  CreatedBy     String
  UpdatedBy     String
}

model NetworkBroadcaster {
  Id            String              @id @map("_id") // IP Address
  Name          String?

  AllowDevicesByDefault Boolean     @default(true)

  Enabled       Boolean             @default(false)
  EnabledOn     DateTime?
  EnabledBy     String?
  DisabledOn    DateTime?
  DisabledBy    String?

  DetectedOn    DateTime
  LastMsgOn     DateTime?

  NetworkDevices NetworkDevice[]
}

model NetworkDevice {
  Id            Int                 @id @default(autoincrement()) @map("_id")
  Enabled       Boolean             @default(false)
  StatusHistory Boolean             @default(false)

  EnabledOn     DateTime?
  EnabledBy     String?
  DisabledOn    DateTime?
  DisabledBy    String?

  DeviceId      Int
  SubnetId      Int
  DeviceType    Int

  BroadcasterId String              
  NetworkBroadcaster      NetworkBroadcaster      @relation(fields: [BroadcasterId], references: [Id], onDelete: Cascade, onUpdate: NoAction)

  AreaId        Int?             
  Area          Area?               @relation(fields: [AreaId], references: [Id], onDelete: Cascade)

  CustomDesc    String

  AddedOn       DateTime          @default(now())
  LastMsgOn     DateTime?

  Channels      DeviceChannelNode[]
}

model DeviceChannelNode {
  Id            Int                 @id @default(autoincrement()) @map("_id")
  NodeNo        Int
  NodeDesc      String

  NodeType      String              

  CustomDesc    String?

  NetworkDevId  Int
  NetworkDevice NetworkDevice       @relation(fields: [NetworkDevId], references: [Id], onDelete: Cascade)

  Status        ChannelStatus[]
  History       ChannelStatusHistory[]
}

model ChannelStatus {
  Id            String              @id @map("_id") // composite ID by device/channel/time
  StateName     String 
  StateValue    String
  StateType     String

  ChannelId     Int
  Channel       DeviceChannelNode      @relation(fields: [ChannelId], references: [Id], onDelete: Cascade) 
}

model ChannelStatusHistory {
  Id            String              @id @map("_id") // composite ID by device/channel/time
  Time          DateTime            // UTC value of millisec
  State         String              // JSON String of all states

  ChannelId     Int
  Channel       DeviceChannelNode      @relation(fields: [ChannelId], references: [Id], onDelete: Cascade) 
}

// type SmartG4Address {
//  SubnetId        Int
//  DeviceId        Int
// }

//enum SystemFilterAction {
//  ACCEPT
//  REJECT
//  PENDING
//}

model SystemFilter {
  Id              String              @id @default(uuid()) @map("_id")
  RuleName        String?
  OrderNo         Int
  Ip              String
  DeviceId        String?
  SubnetId        String?
  FilterAction    String //SystemFilterAction
  DetectedOn      DateTime            @default(now())
  UpdatedOn       DateTime?
  UpdatedBy       String?
}

model IncomingMsg {
  Id              Int                 @id @default(autoincrement()) @map("_id")
  TimeReceived    BigInt
  SenderIp        String
  DeviceType      Int
  OriginDeviceId  Int  // SmartG4Address
  OriginSubnetId  Int  
  OpCode          Int 
  TargetDeviceId  Int  // SmartG4Address
  TargetSubnetId  Int
  ContentLen      Int
  Raw             Bytes
}

model OutgoingMsg {
  Id              Int                 @id @default(autoincrement()) @map("_id")
  TimeReceived    BigInt
  OpCode          Int
  TargetDeviceId  Int  // SmartG4Address
  TargetSubnetId  Int
  ContentLen      Int
  Content         Bytes
  CRCH            Int
  CRCL            Int 
  Priority        String              @default("NORMAL")
}
